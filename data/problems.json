[
  {
    "id": "two_sum",
    "title": "Two Sum",
    "difficulty": "Easy",
    "category": "Arrays & Hashing",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "hints": [
      "A brute force approach would be to check every pair of numbers.",
      "Can you use a hash map to store numbers you've seen?",
      "For each number, check if target - number exists in your hash map."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(n)",
    "companies": ["Google", "Amazon", "Microsoft", "Facebook", "Apple"],
    "tags": ["array", "hash-table", "two-pointers"]
  },
  {
    "id": "reverse_linked_list",
    "title": "Reverse Linked List",
    "difficulty": "Easy",
    "category": "Linked Lists",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    "examples": [
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[5,4,3,2,1]",
        "explanation": "The linked list is reversed from 1->2->3->4->5 to 5->4->3->2->1."
      },
      {
        "input": "head = [1,2]",
        "output": "[2,1]",
        "explanation": "The linked list is reversed from 1->2 to 2->1."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "Empty list remains empty when reversed."
      }
    ],
    "constraints": [
      "The number of nodes in the list is the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "hints": [
      "Keep track of the previous node while traversing.",
      "Use three pointers: current, previous, and next.",
      "Don't forget to handle the edge case of an empty list."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "companies": ["Microsoft", "Amazon", "Google", "Apple", "Facebook"],
    "tags": ["linked-list", "recursion", "iterative"]
  },
  {
    "id": "valid_parentheses",
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "category": "Stack",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets, and open brackets must be closed in the correct order.",
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true",
        "explanation": "The string contains valid parentheses."
      },
      {
        "input": "s = \"()[]{}\"",
        "output": "true",
        "explanation": "All brackets are properly matched and closed."
      },
      {
        "input": "s = \"(]\"",
        "output": "false",
        "explanation": "Mismatched bracket types."
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only '()[]{}'."
    ],
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "When you encounter a closing bracket, check if it matches the most recent opening bracket.",
      "The string is valid if the stack is empty at the end."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(n)",
    "companies": ["Google", "Facebook", "Microsoft", "Amazon", "Bloomberg"],
    "tags": ["string", "stack"]
  },
  {
    "id": "maximum_subarray",
    "title": "Maximum Subarray",
    "difficulty": "Medium",
    "category": "Dynamic Programming",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "[4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "Single element array."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The entire array has the largest sum."
      }
    ],
    "constraints": ["1 <= nums.length <= 10^5", "-10^4 <= nums[i] <= 10^4"],
    "hints": [
      "Think about Kadane's algorithm.",
      "Keep track of the maximum sum ending at each position.",
      "If the current sum becomes negative, start fresh from the current element."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "companies": ["Microsoft", "Amazon", "Google", "Apple", "LinkedIn"],
    "tags": ["array", "divide-and-conquer", "dynamic-programming"]
  },
  {
    "id": "merge_two_sorted_lists",
    "title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "category": "Linked Lists",
    "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a sorted order. The list should be made by splicing together the nodes of the first two lists.",
    "examples": [
      {
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "output": "[1,1,2,3,4,4]",
        "explanation": "The merged list maintains sorted order."
      },
      {
        "input": "list1 = [], list2 = []",
        "output": "[]",
        "explanation": "Both lists are empty."
      },
      {
        "input": "list1 = [], list2 = [0]",
        "output": "[0]",
        "explanation": "One list is empty."
      }
    ],
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both list1 and list2 are sorted in non-decreasing order."
    ],
    "hints": [
      "Use a dummy node to simplify the merging process.",
      "Compare the values of the current nodes from both lists.",
      "Move the pointer of the list with the smaller value."
    ],
    "time_complexity": "O(n + m)",
    "space_complexity": "O(1)",
    "companies": ["Amazon", "Microsoft", "Google", "Apple", "Facebook"],
    "tags": ["linked-list", "recursion", "two-pointers"]
  },
  {
    "id": "binary_search",
    "title": "Binary Search",
    "difficulty": "Easy",
    "category": "Binary Search",
    "description": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.",
    "examples": [
      {
        "input": "nums = [-1,0,3,5,9,12], target = 9",
        "output": "4",
        "explanation": "9 exists in nums and its index is 4."
      },
      {
        "input": "nums = [-1,0,3,5,9,12], target = 2",
        "output": "-1",
        "explanation": "2 does not exist in nums so return -1."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 < nums[i], target < 10^4",
      "All the integers in nums are unique.",
      "nums is sorted in ascending order."
    ],
    "hints": [
      "Use two pointers: left and right to define the search space.",
      "Calculate the middle index and compare with target.",
      "Adjust the search space based on the comparison."
    ],
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "companies": ["Google", "Facebook", "Microsoft", "Amazon", "Apple"],
    "tags": ["array", "binary-search"]
  },
  {
    "id": "climbing_stairs",
    "title": "Climbing Stairs",
    "difficulty": "Easy",
    "category": "Dynamic Programming",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: 1. 1 step + 1 step, 2. 2 steps."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "Three ways: 1. 1 step + 1 step + 1 step, 2. 1 step + 2 steps, 3. 2 steps + 1 step."
      }
    ],
    "constraints": ["1 <= n <= 45"],
    "hints": [
      "This is essentially a Fibonacci sequence problem.",
      "To reach step n, you can come from step n-1 or step n-2.",
      "f(n) = f(n-1) + f(n-2) where f(1) = 1 and f(2) = 2."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "companies": ["Amazon", "Google", "Microsoft", "Apple", "Adobe"],
    "tags": ["math", "dynamic-programming", "memoization"]
  },
  {
    "id": "longest_common_prefix",
    "title": "Longest Common Prefix",
    "difficulty": "Easy",
    "category": "Strings",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
    "examples": [
      {
        "input": "strs = [\"flower\",\"flow\",\"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\",\"racecar\",\"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the input strings."
      }
    ],
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "strs[i] consists of only lower-case English letters."
    ],
    "hints": [
      "Compare characters at the same position across all strings.",
      "Stop when you find a mismatch or reach the end of any string.",
      "Consider edge cases like empty strings."
    ],
    "time_complexity": "O(S)",
    "space_complexity": "O(1)",
    "companies": ["Google", "Microsoft", "Amazon", "Facebook", "Apple"],
    "tags": ["string", "trie"]
  },
  {
    "id": "best_time_to_buy_sell_stock",
    "title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "category": "Arrays & Hashing",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "examples": [
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "constraints": ["1 <= prices.length <= 10^5", "0 <= prices[i] <= 10^4"],
    "hints": [
      "Keep track of the minimum price seen so far.",
      "For each day, calculate the profit if you sell on that day.",
      "Update the maximum profit as you go."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "companies": ["Amazon", "Microsoft", "Google", "Apple", "Facebook"],
    "tags": ["array", "dynamic-programming"]
  },
  {
    "id": "valid_palindrome",
    "title": "Valid Palindrome",
    "difficulty": "Easy",
    "category": "Two Pointers",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Given a string s, return true if it is a palindrome, or false otherwise.",
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "\"amanaplanacanalpanama\" is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "\"raceacar\" is not a palindrome."
      },
      {
        "input": "s = \" \"",
        "output": "true",
        "explanation": "After removing non-alphanumeric characters, s becomes an empty string, which is a palindrome."
      }
    ],
    "constraints": [
      "1 <= s.length <= 2 * 10^5",
      "s consists only of printable ASCII characters."
    ],
    "hints": [
      "Use two pointers from the beginning and end of the string.",
      "Skip non-alphanumeric characters.",
      "Compare characters after converting to lowercase."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "companies": ["Facebook", "Microsoft", "Amazon", "Google", "Apple"],
    "tags": ["two-pointers", "string"]
  },
  {
    "id": "invert_binary_tree",
    "title": "Invert Binary Tree",
    "difficulty": "Easy",
    "category": "Trees",
    "description": "Given the root of a binary tree, invert the tree, and return its root. Inverting a binary tree means swapping the left and right children of every node in the tree.",
    "examples": [
      {
        "input": "root = [4,2,7,1,3,6,9]",
        "output": "[4,7,2,9,6,3,1]",
        "explanation": "The tree is inverted by swapping left and right children."
      },
      {
        "input": "root = [2,1,3]",
        "output": "[2,3,1]",
        "explanation": "Simple tree inversion."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "Empty tree remains empty."
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100"
    ],
    "hints": [
      "Use recursion to solve this problem.",
      "For each node, swap its left and right children.",
      "Recursively invert the left and right subtrees."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(h)",
    "companies": ["Google", "Microsoft", "Amazon", "Apple", "Facebook"],
    "tags": [
      "tree",
      "depth-first-search",
      "breadth-first-search",
      "binary-tree"
    ]
  },
  {
    "id": "contains_duplicate",
    "title": "Contains Duplicate",
    "difficulty": "Easy",
    "category": "Arrays & Hashing",
    "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "examples": [
      {
        "input": "nums = [1,2,3,1]",
        "output": "true",
        "explanation": "The value 1 appears at indices 0 and 3."
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "false",
        "explanation": "All elements are distinct."
      },
      {
        "input": "nums = [1,1,1,3,3,4,3,2,4,2]",
        "output": "true",
        "explanation": "Multiple duplicates exist."
      }
    ],
    "constraints": ["1 <= nums.length <= 10^5", "-10^9 <= nums[i] <= 10^9"],
    "hints": [
      "Use a hash set to track seen elements.",
      "If you encounter an element already in the set, return true.",
      "If you finish without finding duplicates, return false."
    ],
    "time_complexity": "O(n)",
    "space_complexity": "O(n)",
    "companies": ["Amazon", "Microsoft", "Google", "Apple", "Adobe"],
    "tags": ["array", "hash-table", "sorting"]
  }
]
